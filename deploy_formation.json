{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Document Management Architecture",
    "Parameters": {
        "S3BucketName": {
            "Type": "String",
            "Default": "document-management-bucket",
            "Description": "The name of the S3 bucket for storing documents"
        },
        "SNSTopicName": {
            "Type": "String",
            "Default": "document-management-topic",
            "Description": "The name of the SNS topic for sending notifications"
        },
        "LambdaFunctionName": {
            "Type": "String",
            "Default": "document-management-lambda",
            "Description": "The name of the Lambda function"
        },
        "LambdaRoleName": {
            "Type": "String",
            "Default": "document-management-lambda-role",
            "Description": "The name of the IAM role for the Lambda function"
        }
    },
    "Resources": {
        "S3Bucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketName": { "Ref": "S3BucketName" }
            }
        },
        "SNSTopic": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
                "DisplayName": "Document Management Topic",
                "TopicName": { "Ref": "SNSTopicName" }
            }
        },
        "LambdaRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": { "Ref": "LambdaRoleName" },
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": { "Service": [ "lambda.amazonaws.com" ] },
                            "Action": [ "sts:AssumeRole" ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "DocumentManagementPolicy",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:GetObject",
                                        "sns:Publish"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "LambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": { "Ref": "S3BucketName" },
                    "S3Key": "document-management-lambda.zip"
                },
                "FunctionName": { "Ref": "LambdaFunctionName" },
                "Handler": "lambda_function.lambda_handler",
                "Role": { "Fn::GetAtt": [ "LambdaRole", "Arn" ] },
                "Runtime": "python3.8",
                "Timeout": 60,
                "MemorySize": 128,
                "Environment": {
                    "Variables": {
                        "SNS_TOPIC_ARN": { "Ref": "SNSTopic" }
                    }
                },
                "TracingConfig": {
                    "Mode": "Active"
                }
            }
        },
        "LambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": { "Ref": "LambdaFunctionName" },
                "Principal": "s3.amazonaws.com",
                "SourceAccount": { "Ref": "AWS::AccountId" },
                "SourceArn":{
"Fn::Join": [
"",
[
"arn:aws:s3:::",
{ "Ref": "S3BucketName" },
"/"
]
]
}
}
},
"S3EventNotification": {
"Type": "AWS::S3::Bucket",
"Properties": {
"Bucket": { "Ref": "S3BucketName" },
"NotificationConfiguration": {
"LambdaConfigurations": [
{
"Event": "s3:ObjectCreated:",
"Function": { "Fn::GetAtt": [ "LambdaFunction", "Arn" ] }
}
]
}
}
}
},
"Outputs": {
"S3BucketArn": {
"Value": { "Fn::GetAtt": [ "S3Bucket", "Arn" ] },
"Description": "The ARN of the S3 bucket for storing documents"
},
"SNSTopicArn": {
"Value": { "Ref": "SNSTopic" },
"Description": "The ARN of the SNS topic for sending notifications"
},
"LambdaFunctionArn": {
"Value": { "Fn::GetAtt": [ "LambdaFunction", "Arn" ] },
"Description": "The ARN of the Lambda function"
}
}
}
